#!/usr/bin/env python2.7
from __future__ import absolute_import, division, print_function
from os import chmod, makedirs
from zappa.cli import ZappaCLI

# Alas, Zappa doesn't provide this (yet) as separate functionality. This is
# copied from zappa/cli.py (create_package method).
zcli = ZappaCLI()
zcli.api_stage = "dev"
zcli.load_settings()

settings_s = "# Generated by generate-zappa-settings.py\n"

if zcli.app_function:
    if '.' not in zcli.app_function: # pragma: no cover
        raise ClickException("Your " + click.style("app_function", fg='red', bold=True) + " value is not a modular path." +
            " It needs to be in the format `" + click.style("your_module.your_app_object", bold=True) + "`.")
    app_module, app_function = zcli.app_function.rsplit('.', 1)
    settings_s = settings_s + "APP_MODULE='{0!s}'\nAPP_FUNCTION='{1!s}'\n".format(app_module, app_function)

if zcli.exception_handler:
    settings_s += "EXCEPTION_HANDLER='{0!s}'\n".format(zcli.exception_handler)
else:
    settings_s += "EXCEPTION_HANDLER=None\n"

if zcli.debug:
    settings_s = settings_s + "DEBUG=True\n"
else:
    settings_s = settings_s + "DEBUG=False\n"

settings_s = settings_s + "LOG_LEVEL='{0!s}'\n".format((zcli.log_level))

# If we're on a domain, we don't need to define the /<<env>> in
# the WSGI PATH
if zcli.domain:
    settings_s = settings_s + "DOMAIN='{0!s}'\n".format((zcli.domain))
else:
    settings_s = settings_s + "DOMAIN=None\n"

# Pass through remote config bucket and path
if zcli.remote_env:
    settings_s = settings_s + "REMOTE_ENV='{0!s}'\n".format(
        zcli.remote_env
    )
# DEPRICATED. use remove_env instead
elif zcli.remote_env_bucket and zcli.remote_env_file:
    settings_s = settings_s + "REMOTE_ENV='s3://{0!s}/{1!s}'\n".format(
        zcli.remote_env_bucket, zcli.remote_env_file
    )

# Local envs
env_dict = {}
if zcli.aws_region:
    env_dict['AWS_REGION'] = zcli.aws_region
env_dict.update(dict(zcli.environment_variables))
settings_s = settings_s + "ENVIRONMENT_VARIABLES={0}\n".format(
        env_dict
    )

# We can be environment-aware
settings_s = settings_s + "API_STAGE='{0!s}'\n".format((zcli.api_stage))
settings_s = settings_s + "PROJECT_NAME='{0!s}'\n".format((zcli.project_name))

if zcli.settings_file:
    settings_s = settings_s + "SETTINGS_FILE='{0!s}'\n".format((zcli.settings_file))
else:
    settings_s = settings_s + "SETTINGS_FILE=None\n"

if zcli.django_settings:
    settings_s = settings_s + "DJANGO_SETTINGS='{0!s}'\n".format((zcli.django_settings))
else:
    settings_s = settings_s + "DJANGO_SETTINGS=None\n"

# AWS Events function mapping
event_mapping = {}
events = zcli.stage_config.get('events', [])
for event in events:
    arn = event.get('event_source', {}).get('arn')
    function = event.get('function')
    if arn and function:
        event_mapping[arn] = function
settings_s = settings_s + "AWS_EVENT_MAPPING={0!s}\n".format(event_mapping)

# Authorizer config
authorizer_function = zcli.authorizer.get('function', None)
if authorizer_function:
    settings_s += "AUTHORIZER_FUNCTION='{0!s}'\n".format(authorizer_function)

# Copy our Django app into root of our package.
# It doesn't work otherwise.
if zcli.django_settings:
    makedirs("ext")
    with open("ext/django_zappa.py", "w") as fd:
        fd.write(django_py)

with open("zappa_settings.py", "w") as fd:
    fd.write(settings_s)

chmod("zappa_settings.py", 0o644)
