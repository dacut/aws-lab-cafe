AWSTemplateFormatVersion: "2010-09-09"
Description: "AWS Lab Cafe -- allow students in a lab to deploy EC2 instances without having to know about AWS."
Parameters:
  EnableDebug:
    Type: String
    Default: false
    Description: Whether debugging output should be provided.
    AllowedValues:
      - false
      - true
  LambdaMemorySize:
    Type: Number
    Default: 512
    Description: The amount of memory (MB) available to the Lambda function.
    AllowedValues: [128, 192, 256, 320, 384, 448, 512, 576, 640, 704, 768, 832,
      896, 960, 1024, 1088, 1152, 1216, 1280, 1344, 1408, 1472, 1536]
    ConstraintDescription: Must be from 128-1536 MB in multiples of 64 MB.
  EventTableRCU:
    Type: Number
    Default: 5
    Description: The DynamoDB provisioned read capacity for the events table.
    MinValue: 1
  EventTableWCU:
    Type: Number
    Default: 1
    Description: The DynamoDB provisioned write capacity for the events table.
    MinValue: 1
  UserTableRCU:
    Type: Number
    Default: 5
    Description: The DynamoDB provisioned read capacity for the users table.
    MinValue: 1
  UserTableWCU:
    Type: Number
    Default: 1
    Description: The DynamoDB provisioned write capacity for the users table.
    MinValue: 1
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      Label:
        default: Performance
      Parameters:
        - LambdaMemorySize
        - EventTableRCU
        - EventTableWCU
        - UserTableRCU
        - UserTableWCU
    ParameterGroups:
      Label:
        default: Advanced
      Parameters:
        - EnableDebug
Resources:
  Api:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: !Join ["", ["AWS Lab Cafe: ", !Ref "AWS::StackName" ]]
      Name: !Ref AWS::StackName
  ProxyPath:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt Api.RootResourceId
      PathPart: "{proxy+}"
      RestApiId: !Ref Api
  RootMethods:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        CacheKeyParameters: []
        CacheNamespace: none
        Credentials: !GetAtt LambdaInvocationRole.Arn
        IntegrationHttpMethod: POST
        IntegrationResponses: []
        PassthroughBehavior: NEVER
        Type: AWS_PROXY
        Uri: !Join ["", ["arn:aws:apigateway:", !Ref "AWS::Region",
                         ":lambda:path/2015-03-31/functions/",
                         !GetAtt ZappaFunction.Arn, "/invocations"]]
      MethodResponses: []
      ResourceId: !GetAtt Api.RootResourceId
      RestApiId: !Ref Api
  ProxyMethods:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        CacheKeyParameters: []
        CacheNamespace: none
        Credentials: !GetAtt LambdaInvocationRole.Arn
        IntegrationHttpMethod: POST
        IntegrationResponses: []
        PassthroughBehavior: NEVER
        Type: AWS_PROXY
        Uri: !Join ["", ["arn:aws:apigateway:", !Ref "AWS::Region",
                         ":lambda:path/2015-03-31/functions/",
                         !GetAtt ZappaFunction.Arn, "/invocations"]]
      MethodResponses: []
      ResourceId: !Ref ProxyPath
      RestApiId: !Ref Api
  ZappaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: cuthbert-labcafe-artifacts
        S3Key: aws-lab-cafe.zip
      Description: AWS Lab Cafe webserver.
      Environment:
        Variables:
          DEBUG: !Ref EnableDebug
          ENCRYPTION_KEY_ID: !Ref EncryptionKey
          LABCAFE_TABLE_PREFIX: !Ref "AWS::StackName"
      Handler: "labcafe.handler"
      MemorySize: 1024
      Role: !GetAtt ZappaFunctionRole.Arn
      Runtime: python2.7
      Timeout: 10
  EncryptionKey:
    Type: "AWS::KMS::Key"
    Properties:
      Description: AWS Lab Cafe encryption key
      Enabled: true
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Id: key-default-1
        Statement:
          -
            Sid: Allow key administration
            Effect: Allow
            Principal:
              AWS: !Join ["", ["arn:aws:iam::", !Ref "AWS::AccountId", ":root"]]
            Action:
              - "kms:*"
            Resource: "*"
          -
            Sid: Allow encryption/decryption
            Effect: Allow
            Principal:
              AWS: !GetAtt ZappaFunctionRole.Arn
            Action:
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:GenerateDataKey
              - "kms:ReEncrypt*"
            Resource: "*"
  LambdaInvocationRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - "apigateway.amazonaws.com"
                - "events.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        -
          Effect: Allow
          Action:
            - "cloudwatch:*"
            - "logs:*"
          Resource: "*"
        -
          Effect: Allow
          Action: lambda:InvokeFunction
          Resource: !GetAtt ZappaFunction.Arn
  ZappaFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Principal:
               Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        -
          PolicyName: LabCafeAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: Allow
                Action:
                  - "cloudwatch:*"
                  - "efs:*"
                  - "logs:*"
                Resource: "*"
              -
                Effect: Allow
                Action:
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:ListTables
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                Resource:
                  - !Join ["", ["arn:aws:dynamodb:", !Ref "AWS::Region", ":",
                                !Ref "AWS::AccountId", ":table/",
                                !Ref "AWS::StackName", ".Events"]]
                  - !Join ["", ["arn:aws:dynamodb:", !Ref "AWS::Region", ":",
                                !Ref "AWS::AccountId", ":table/",
                                !Ref "AWS::StackName", ".Users"]]
              -
                Effect: Allow
                Action:
                  - ec2:AttachVolume
                  - ec2:CreateTags
                  - ec2:CreateVolume
                  - ec2:DeleteTags
                  - ec2:DeleteVolume
                  - ec2:DescribeImageAttribute
                  - ec2:DescribeImages
                  - ec2:DescribeInstanceAttribute
                  - ec2:DescribeInstances
                  - ec2:DescribeInstanceStatus
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeTags
                  - ec2:GetConsoleOutput
                  - ec2:GetConsoleScreenshot
                  - ec2:ModifyInstanceAttribute
                  - ec2:ModifyVolumeAttribute
                  - ec2:RebootInstances
                  - ec2:ResetInstanceAttribute
                  - ec2:RunInstances
                  - ec2:StartInstances
                  - ec2:StopInstances
                  - ec2:TerminateInstances
                Resource: "*"
                Condition:
                  StringEquals:
                    ec2:Region: !Ref AWS::Region
  EventsTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        -
          AttributeName: EventId
          AttributeType: S
      KeySchema:
        -
          AttributeName: EventId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref EventTableRCU
        WriteCapacityUnits: !Ref EventTableWCU
      TableName: !Join ["", [ !Ref "AWS::StackName", ".Events"]]
  UsersTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        -
          AttributeName: Email
          AttributeType: S
        -
          AttributeName: EventId
          AttributeType: S
      KeySchema:
        -
          AttributeName: Email
          KeyType: HASH
        -
          AttributeName: EventId
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref UserTableRCU
        WriteCapacityUnits: !Ref UserTableWCU
      TableName: !Join ["", [ !Ref "AWS::StackName", ".Users"]]
Outputs:
  ZappaFunctionARN:
    Value: !GetAtt ZappaFunction.Arn
