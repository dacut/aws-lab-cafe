AWSTemplateFormatVersion: "2010-09-09"
Description: "AWS Lab Cafe -- allow students in a lab to deploy EC2 instances without having to know about AWS."
Parameters:
  DynamoDBTablePrefix:
    Type: String
    Default: "LabCafe."
    Description: Prefix for all DynamoDB tables used by LabCafe.
  EnableDebug:
    Type: String
    Default: false
    Description: Whether debugging output should be provided.
    AllowedValues:
      - false
      - true
  LambdaFunctionName:
    Type: String
    Default: AWSLabCafe
    Description: The name of the Lambda function to create to serve the website.
  LambdaMemorySize:
    Type: Number
    Default: 512
    Description: The amount of memory (MB) available to the Lambda function.
    AllowedValues: [128, 192, 256, 320, 384, 448, 512, 576, 640, 704, 768, 832,
      896, 960, 1024, 1088, 1152, 1216, 1280, 1344, 1408, 1472, 1536]
    ConstraintDescription: Must be from 128-1536 MB in multiples of 64 MB.
  EventTableReadCapacityUnits:
    Type: Number
    Default: 5
    Description: The DynamoDB provisioned read capacity for the events table.
    MinValue: 1
  EventTableWriteCapacityUnits:
    Type: Number
    Default: 1
    Description: The DynamoDB provisioned write capacity for the events table.
    MinValue: 1
  UserTableReadCapacityUnits:
    Type: Number
    Default: 5
    Description: The DynamoDB provisioned read capacity for the users table.
    MinValue: 1
  UserTableWriteCapacityUnits:
    Type: Number
    Default: 1
    Description: The DynamoDB provisioned write capacity for the users table.
    MinValue: 1
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      Label:
        default: Object names
      Parameters:
        - DynamoDBTablePrefix
        - LambdaFunctionName
    ParameterGroups:
      Label:
        default: Performance
      Parameters:
        - LambdaMemorySize
        - EventTableReadCapacityUnits
        - EventTableWriteCapacityUnits
        - UserTableReadCapacityUnits
        - UserTableWriteCapacityUnits
    ParameterGroups:
      Label:
        default: Advanced
      Parameters:
        - EnableDebug
Resources:
  Api:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Description: AWS Lab Cafe HTTP HTML endpoint.
      Name: LabCafe
  ApiRootMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: ANY
      Integration:
        Credentials: !GetAtt ApiGatewayRole.Arn
        IntegrationHttpMethod: ANY
        Type: AWS
        Uri: !GetAtt LambdaFunction.Arn
      Resource: !GetAtt Api.RootResourceId
  ApiDeployment:
    Type: "AWS::ApiGateway::Stage"
    Properties:
      RestApiId: !Ref Api
      StageName: Development
    DependsOn:
      - ApiRootMethod
  LambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: cuthbert-labcafe-artifacts
        S3Key: aws-lab-cafe.zip
      Environment:
        Variables:
          LABCAFE_TABLE_PREFIX: !Ref DynamoDBTablePrefix
          DEBUG: !Ref EnableDebug
      FunctionName: !Ref LambdaFunctionName
      Handler: "labcafe.lambda_handler"
      Role: !GetAtt LambdaRole.Arn
      Runtime: python2.7
  ApiGatewayRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Principal:
               Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        -
          PolicyName: LambdaFunctionAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt LambdaFunction.Arn
  LambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Principal:
               Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        -
          PolicyName: DynamoDBTableAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: Allow
                Action:
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:DeleteItem
                  - dynamodb:DescribeTable
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                Resource:
                  - !Join ["", [ "arn:aws:dynamodb:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":table/", !Ref DynamoDBTablePrefix, "Events" ]]
                  - !Join ["", [ "arn:aws:dynamodb:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":table/", !Ref DynamoDBTablePrefix, "Users" ]]
        -
          PolicyName: EC2Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: Allow
                Action:
                  - ec2:CreateTags
                  - ec2:DescribeInstances
                  - ec2:DescribeSubnets
                  - ec2:GetConsoleScreenshot
                  - ec2:RebootInstances
                  - ec2:RunInstances
                  - ec2:StartInstances
                  - ec2:StopInstances
                  - ec2:TerminateInstances
                Resource: "*"
  EventsTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        -
          AttributeName: EventId
          AttributeType: S
      KeySchema:
        -
          AttributeName: EventId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref EventTableReadCapacityUnits
        WriteCapacityUnits: !Ref EventTableWriteCapacityUnits
      TableName: !Join ["", [ !Ref DynamoDBTablePrefix , "Events"]]
  UsersTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        -
          AttributeName: Email
          AttributeType: S
        -
          AttributeName: EventId
          AttributeType: S
      KeySchema:
        -
          AttributeName: Email
          KeyType: HASH
        -
          AttributeName: EventId
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref UserTableReadCapacityUnits
        WriteCapacityUnits: !Ref UserTableWriteCapacityUnits
      TableName: !Join ["", [ !Ref DynamoDBTablePrefix , "Users"]]
